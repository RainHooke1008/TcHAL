<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="EL4102" Id="{dae8e18e-e475-0078-2c0d-f95204bb3b0e}" SpecialFunc="None">
    <Declaration><![CDATA[(**
This function block abstracts the Beckhoff EtherCAT terminal EL4102 (0…10 V, 16 Bit)
*)
FUNCTION_BLOCK EL4102 implements I_terminal_execution
VAR_INPUT
END_VAR
VAR_OUTPUT
	AO_Voltage_channel_1 		: I_AO_Voltage :=_ar_channels[1];
	AO_Voltage_channel_2 		: I_AO_Voltage :=_ar_channels[1];
END_VAR
VAR
	WcState_WcState			AT%I*: BOOL;
	InfoData_State			AT%I*: UINT;
	InfoData_AdsAddr_netId  AT%I*: AMSNETID;
	InfoData_AdsAddr_port 	AT%I*: WORD;
	
	Channel_1_Output         AT%Q*: INT;
	Channel_2_Output         AT%Q*: INT;
	
	_ar_channels : ARRAY[1..NUMBER_OF_CHANNELS] OF AO_Voltage_Channel[
		(adc_min:=ADC_MIN, adc_max:=ADC_MAX, physical_min:=PHYSICAL_MIN, physical_max:=PHYSICAL_MAX, channel_number:=1),
		(adc_min:=ADC_MIN, adc_max:=ADC_MAX, physical_min:=PHYSICAL_MIN, physical_max:=PHYSICAL_MAX, channel_number:=2)
    ];

	// ===============================================================================
	// CoE handling  
	// ==============
    _I_CoE_com_handler      : I_CoE_communication_handler;
    _CoE_prop_handler       : CoE_property_handler;
    // ====  CoE properties  ===========
	_p_DeviceName 			: CoE_property_string(Index:=16#1008 , SubIndex:=0, writable:=FALSE, propertyType:=0, pollingInterval:=T#5S);
	_p_DeviceType 			: CoE_property_udint(Index:=16#1000 , SubIndex:=0, writable:=FALSE, propertyType:=0, pollingInterval:=T#5S);
	_p_ProductCode 			: CoE_property_udint(Index:=16#1018 , SubIndex:=2, writable:=FALSE, propertyType:=0, pollingInterval:=T#5S);
	_p_Revision 			: CoE_property_udint(Index:=16#1018 , SubIndex:=3, writable:=FALSE, propertyType:=0, pollingInterval:=T#5S);
	_p_SerialNumber 		: CoE_property_udint(Index:=16#1018 , SubIndex:=4, writable:=FALSE, propertyType:=0, pollingInterval:=T#5S);
	_p_SoftwareVersion		: CoE_property_string(Index:=16#100A , SubIndex:=0, writable:=FALSE, propertyType:=0, pollingInterval:=T#5S);
	_p_VendorId 			: CoE_property_udint(Index:=16#1018 , SubIndex:=1, writable:=FALSE, propertyType:=0, pollingInterval:=T#5S);
	_p_HardwareVersion		: CoE_property_string(Index:=16#1009 , SubIndex:=0, writable:=FALSE, propertyType:=0, pollingInterval:=T#5S);
	// ==============
	_properties  : ARRAY[1..8]OF I_CoE_property:=[
		_p_DeviceName, _p_DeviceType, _p_ProductCode, _p_Revision, _p_SerialNumber, 
		_p_SoftwareVersion, _p_VendorId, _p_HardwareVersion
	];
	// ===============================================================================
    
	_I_InterfaceManager : I_InterfaceManager;
    _terminal_name      : STRING;
    _terminal_id        : UINT;
    errId               : HAL_ErrorEnum;
	neg_wcState         : f_trig;
    _j                  : USINT;
END_VAR
VAR CONSTANT
	ADC_MIN        	: INT:=0;
	ADC_MAX        	: INT:=32767;
	PHYSICAL_MIN 	: INT:=0;
	PHYSICAL_MAX 	: INT:=10;
	
    HARDWARE_REVSION : UINT:=19;
    NUMBER_OF_CHANNELS : USINT:=2;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_ar_channels[1].wcState:= WcState_WcState;
_ar_channels[2].wcState:= WcState_WcState;

_ar_channels[1](terminal_address:=InfoData_AdsAddr_port, CoE_communication_handler:=_I_CoE_com_handler);
_ar_channels[2](terminal_address:=InfoData_AdsAddr_port, CoE_communication_handler:=_I_CoE_com_handler);

Channel_1_Output := _ar_channels[1].terminal_value;
Channel_2_Output := _ar_channels[2].terminal_value;

IF  _I_InterfaceManager <> 0 AND 
    _I_CoE_com_handler <> 0
THEN
    FOR _j:=1 TO NUMBER_OF_CHANNELS DO
        // should be possible to get rid of the address input 
        _ar_channels[_j](terminal_address:=InfoData_AdsAddr_port, CoE_communication_handler:=_I_CoE_com_handler);
    END_FOR
    
    _CoE_prop_handler(terminal_address:=InfoData_AdsAddr_port, CoE_communication_handler:=_I_CoE_com_handler, CoE_properties:=_properties);

    neg_wcState(CLK:=WcState_WcState);
    IF neg_wcState.Q THEN
        ;
    END_IF
END_IF
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{5f535ceb-8387-03b9-1756-abac8cf978ae}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	CoE_communication_handler : I_CoE_communication_handler;
    InterfaceManager            : I_InterfaceManager;
	name                        : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_I_CoE_com_handler := CoE_communication_handler;

FOR _j:=1 TO NUMBER_OF_CHANNELS DO
    _ar_channels[_j].CoE_communication_handler := CoE_communication_handler;
END_FOR

_terminal_name := name;
_I_InterfaceManager := InterfaceManager;

// register  terminal and all channel interfaces
IF InterfaceManager <> 0 THEN
    _I_InterfaceManager.register_terminal(terminal_name:=_terminal_name , errId=>errId , terminalId=>_terminal_id);
    
    FOR _j:=1 TO NUMBER_OF_CHANNELS DO
        _ar_channels[_j].register_channel(terminalId:=_terminal_id , I_interface_manager:=_I_InterfaceManager , errId=>errId );
        IF errId <> HAL_ErrorEnum.no_error THEN
            ;  // ToDo: add logging or Error handling 
        END_IF 
    END_FOR
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="run" Id="{8f3f20a0-628e-0aa9-1f1d-673154a06f5c}">
      <Declaration><![CDATA[METHOD run : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>